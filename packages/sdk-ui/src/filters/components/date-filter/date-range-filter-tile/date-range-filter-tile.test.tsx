/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { mockUrl, mockToken, fetchMocks } from '../../../../__mocks__/fetch-mocks';

import { fireEvent, render, screen } from '@testing-library/react';
import { DateRangeFilterTile } from './date-range-filter-tile';
import * as DM from '../../../../__mocks__/data/sample-ecommerce-autogenerated';
import { filterFactory } from '@sisense/sdk-data';
import { SisenseContextProvider } from '../../../../sisense-context/sisense-context-provider';

describe('DateRangeFilterTile', () => {
  beforeEach(() => {
    fetchMock.resetMocks();
  });

  it('should render DateRangeFilterTile', async () => {
    expect.assertions(2);

    // Rendering a DateRangeFilterTile requires 3 fetches
    fetchMock.mockResponses(fetchMocks.globals, fetchMocks.palettes, fetchMocks.jaqlDates);

    const dateRangeFilter = filterFactory.dateRange(DM.Commerce.Date.Years);

    const { container } = render(
      <SisenseContextProvider url={mockUrl} token={mockToken} enableTracking={false}>
        <DateRangeFilterTile
          title="Date Range"
          dataSource={DM.DataSource}
          attribute={DM.Commerce.Date.Years}
          filter={dateRangeFilter}
          onChange={() => {}}
        />
      </SisenseContextProvider>,
    );

    expect(await screen.findByText('2009-01-01')).toBeInTheDocument();

    const dateButton = container.querySelector('.h-button') || container;
    fireEvent.click(dateButton);
    expect(dateButton).toMatchSnapshot();
  });

  it('should render a DateRangeFilterTile component with jaql error', async () => {
    expect.assertions(1);

    // Set failed jaql response
    fetchMock.mockResponses(fetchMocks.globals, fetchMocks.palettes, [
      JSON.stringify({ error: true }),
      { status: 500 },
    ]);

    const dateRangeFilter = filterFactory.dateRange(DM.Commerce.Date.Years);

    const { findByLabelText, findByText } = render(
      <SisenseContextProvider url={mockUrl} token={mockToken} enableTracking={false}>
        <DateRangeFilterTile
          title="Date Range"
          dataSource={DM.DataSource}
          attribute={DM.Commerce.Date.Years}
          filter={dateRangeFilter}
          onChange={() => {}}
        />
      </SisenseContextProvider>,
    );

    const errorBoxContainer = await findByLabelText('error-box');
    fireEvent.mouseEnter(errorBoxContainer);
    const errorBoxText = await findByText(/Error/);

    expect(errorBoxText).toBeTruthy();
  });
});
