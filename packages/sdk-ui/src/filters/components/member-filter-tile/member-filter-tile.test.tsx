import { render, screen, fireEvent } from '@testing-library/react';
import { type MembersFilter, filterFactory } from '@sisense/sdk-data';
import { MemberFilterTile } from './member-filter-tile';
import { mockUrl, mockToken, fetchMocks } from '../../../__mocks__/fetch-mocks';
import { SisenseContextProvider } from '../../../sisense-context/sisense-context-provider';
import * as DM from '../../../__mocks__/data/sample-ecommerce-autogenerated';

describe('MemberFilterTile', () => {
  beforeEach(() => {
    fetchMock.resetMocks();
  });

  it('should render a MemberFilterTile component', async () => {
    expect.assertions(3);

    // Rendering a MemberFilterTile requires 3 fetches
    fetchMock.mockResponses(fetchMocks.globals, fetchMocks.palettes, fetchMocks.jaqlAgeRange);

    const filterTitle = 'Member Filter Title';
    const filter = filterFactory.members(DM.Commerce.AgeRange, ['0-18', '65+']) as MembersFilter;
    render(
      <SisenseContextProvider url={mockUrl} token={mockToken} enableTracking={false}>
        <MemberFilterTile
          title={filterTitle}
          dataSource={'Some datasource'}
          attribute={DM.Commerce.AgeRange}
          filter={filter}
          onChange={() => {}}
        />
      </SisenseContextProvider>,
    );

    expect(await screen.findByText(filterTitle)).toBeInTheDocument();

    await Promise.all(
      filter.members.map(async (member: string) =>
        expect(await screen.findByText(member)).toBeInTheDocument(),
      ),
    );
  });

  it('should render a MemberFilterTile component with jaql error', async () => {
    expect.assertions(1);

    // Set failed jaql response
    fetchMock.mockResponses(fetchMocks.globals, fetchMocks.palettes, [
      JSON.stringify({ error: true }),
      { status: 500 },
    ]);

    const filterTitle = 'Member Filter Title';
    const filter = filterFactory.members(DM.Commerce.AgeRange, ['0-18', '65+']) as MembersFilter;
    const { findByLabelText, findByText } = render(
      <SisenseContextProvider url={mockUrl} token={mockToken} enableTracking={false}>
        <MemberFilterTile
          title={filterTitle}
          dataSource={'Some datasource'}
          attribute={DM.Commerce.AgeRange}
          filter={filter}
          onChange={() => {}}
        />
      </SisenseContextProvider>,
    );

    const errorBoxContainer = await findByLabelText('error-box');
    fireEvent.mouseEnter(errorBoxContainer);
    const errorBoxText = await findByText(/Error/);

    expect(errorBoxText).toBeTruthy();
  });
});
