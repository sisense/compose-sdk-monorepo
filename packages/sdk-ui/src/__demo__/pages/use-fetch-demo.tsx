import React, { useEffect, useState } from 'react';
import ReactJson from 'react-json-view';
import { useFetch } from '@/index';
import { AnyObject } from '@/utils/utility-types';
import { LinearProgress } from '@mui/material';
import * as DM from '../sample-ecommerce-autogenerated.js';
import { getJaqlQueryPayload } from '@sisense/sdk-query-client';
import { measureFactory } from '@sisense/sdk-data';

export function UseFetchDemo() {
  const {
    data: folders,
    error: foldersError,
    isLoading: foldersIsLoading,
  } = useFetch<AnyObject, Error>('api/v1/folders');

  const {
    data: elasticubes,
    error: elasticubesError,
    isLoading: elasticubesIsLoading,
  } = useFetch<AnyObject, Error>('api/v1/elasticubes/getElasticubes', {
    method: 'POST',
  });

  return (
    <>
      <div>
        <>
          <i>'GET api/v1/folders'</i>:{' '}
          {foldersIsLoading ? (
            <LinearProgress />
          ) : foldersError ? (
            `Error: ${foldersError.message}`
          ) : (
            <ReactJson src={folders} collapsed />
          )}
          <br />
          <i>'POST api/v1/elasticubes/getElasticubes'</i>:{' '}
          {elasticubesIsLoading ? (
            <LinearProgress />
          ) : elasticubesError ? (
            `Error: ${elasticubesError.message}`
          ) : (
            <ReactJson src={elasticubes} collapsed />
          )}
          <br />
          <DownloadPdfDemo />
          <DownloadCsvDemo />
        </>
      </div>
    </>
  );
}

function DownloadPdfDemo() {
  const [shouldDownloadPdf, setShouldDownloadPdf] = useState(false);
  const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);

  const { data: dashboards } = useFetch<{ oid: string }[], Error>('api/dashboards');

  const {
    data: newPdfBlob,
    error: pdfError,
    isFetching: pdfIsLoading,
    refetch: refetchPdf,
  } = useFetch<Blob>(
    `api/v1/export/dashboards/${dashboards?.[0].oid}/pdf`,
    {
      method: 'POST',
      body: JSON.stringify({
        params: {
          preview: true,
          paperFormat: 'A4',
          paperOrientation: 'portrait',
          showNarration: true,
          showDashboardTitle: true,
          showDashboardFilters: true,
          showDatasourceInfo: true,
          elasticubeBuiltValue: '20 Apr 2021 14:54:27',
        },
      }),
      headers: {
        'Content-Type': 'application/json',
      },
    },
    { requestConfig: { returnBlob: true }, enabled: !!dashboards && shouldDownloadPdf },
  );

  useEffect(() => {
    if (newPdfBlob) {
      setPdfBlob(newPdfBlob);
    }
  }, [newPdfBlob]);

  useEffect(() => {
    if (pdfBlob) {
      downloadPdf(pdfBlob);
      setPdfBlob(null); // Clear pdfBlob after downloading
    }
  }, [pdfBlob]);

  const downloadPdf = (blob: Blob) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'report.pdf';
    a.click();
    URL.revokeObjectURL(url);
  };

  return dashboards && dashboards.length > 0 ? (
    <>
      <i>'POST api/v1/export/dashboards/{dashboards[0].oid}/pdf'</i>: <br />
      <button
        onClick={() => {
          if (pdfIsLoading) {
            return;
          }
          if (shouldDownloadPdf) {
            refetchPdf();
          } else {
            setShouldDownloadPdf(true);
          }
        }}
      >
        Download pdf
      </button>
      <br />
      {pdfIsLoading && <LinearProgress />}
      {pdfError && `Error: ${pdfError}`}
    </>
  ) : null;
}

function DownloadCsvDemo() {
  const [shouldDownloadCsv, setShouldDownloadCsv] = useState(false);
  const [csvBlob, setCsvBlob] = useState<Blob | null>(null);
  const params = new URLSearchParams();
  params.append(
    'data',
    encodeURIComponent(
      JSON.stringify(
        getJaqlQueryPayload(
          {
            dataSource: DM.DataSource,
            measures: [measureFactory.sum(DM.Commerce.Revenue)],
            attributes: [DM.Commerce.Gender],
            highlights: [],
            filters: [],
          },
          false,
        ),
      ),
    ),
  );

  const {
    data: newCsvBlob,
    error: csvError,
    isFetching: csvIsLoading,
    refetch: refetchCsv,
  } = useFetch<Blob>(
    'api/datasources/Sample%20ECommerce/jaql/csv',
    {
      method: 'POST',
      body: params,
    },
    { requestConfig: { returnBlob: true }, enabled: shouldDownloadCsv },
  );

  useEffect(() => {
    if (newCsvBlob) {
      setCsvBlob(newCsvBlob);
    }
  }, [newCsvBlob]);

  useEffect(() => {
    if (csvBlob) {
      downloadPdf(csvBlob);
      setCsvBlob(null); // Clear pdfBlob after downloading
    }
  }, [csvBlob]);

  const downloadPdf = (blob: Blob) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'report.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <>
      <br />
      <br />
      <i>'POST api/datasources/Sample%20ECommerce/jaql/csv'</i>
      <br />
      <button
        onClick={() => {
          if (csvIsLoading) {
            return;
          }
          if (shouldDownloadCsv) {
            refetchCsv();
          } else {
            setShouldDownloadCsv(true);
          }
        }}
      >
        Download CSV
      </button>
      <br />
      {csvIsLoading && <LinearProgress />}
      {csvError && `Error: ${csvError}`}
    </>
  );
}
