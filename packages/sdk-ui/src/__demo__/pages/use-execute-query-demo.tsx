import { measures as measureFactory, filters as filterFactory } from '@sisense/sdk-data';
import * as DM from '../sample-ecommerce-autogenerated';
import * as Ecom from '../sample-ecommerce-autogenerated';
import { useState } from 'react';
import { useExecuteQuery } from '../../query-execution';
import { Chart } from '../../chart';

export const PreviousData = () => {
  const [dateGrouping, setDateGrouping] = useState('Years');

  const { data, isLoading, isError } = useExecuteQuery({
    dataSource: DM.DataSource,
    dimensions: [DM.Commerce.Date[dateGrouping]],
    measures: [measureFactory.sum(Ecom.Commerce.Revenue, 'Total Revenue')],
    filters: [filterFactory.greaterThan(Ecom.Commerce.Revenue, 1000)],
  });

  if (data) {
    console.log('DEBUG Data', data.columns[0], dateGrouping, data, 'isLoading', isLoading);
  }

  return (
    <>
      <button onClick={() => setDateGrouping('Years')}> Years </button>
      <button onClick={() => setDateGrouping('Months')}> Months </button>
      {isLoading && <div>Loading...</div>}
      {isError && <div>Error</div>}
      {!isLoading && data && (
        <div>
          <div>Data Loaded</div>
          <Chart
            chartType="column"
            dataSet={data}
            dataOptions={{
              category: [{ name: dateGrouping, type: 'datetime' }],
              value: [{ name: 'Total Revenue' }],
              breakBy: [],
            }}
          />
        </div>
      )}
    </>
  );
};

export const MeasuredValueInfiniteRender = () => {
  const { data, isLoading, isError } = useExecuteQuery({
    dataSource: Ecom.DataSource,
    dimensions: [Ecom.Commerce.Date.Years],
    measures: [
      measureFactory.sum(Ecom.Commerce.Revenue, 'Total Revenue'),
      measureFactory.measuredValue(
        measureFactory.sum(Ecom.Commerce.Revenue),
        [filterFactory.equals(Ecom.Category.Category, 'Televisions')],
        'Televisions',
      ),
    ],
  });

  if (data) {
    console.log('Data', data);
  }

  return (
    <>
      {isLoading && <div>Loading...</div>}
      {isError && <div>Error</div>}
      {data && (
        <div style={{ width: '600px' }}>
          <div>Data Loaded</div>
          <Chart
            chartType="column"
            dataSet={data}
            dataOptions={{
              category: [Ecom.Commerce.Date.Years],
              value: [{ name: 'Total Revenue' }, { name: 'Televisions' }],
            }}
          />
        </div>
      )}
    </>
  );
};
