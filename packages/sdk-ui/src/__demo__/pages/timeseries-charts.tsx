import { measureFactory, filterFactory } from '@sisense/sdk-data';
import * as Ecom from '../sample-ecommerce-autogenerated.js';
import { useMemo, useState } from 'react';
import { useExecuteQuery } from '../../query-execution/index.js';
import { Chart } from '../../chart';

export const TimeseriesCharts = () => {
  const [dateLevel, setDateLevel] = useState('Months'); // ['Months', 'Years', 'Days']
  const dateDimension = useMemo(() => Ecom.Commerce.Date[`${dateLevel}`], [dateLevel]);
  const { data, isLoading, isError } = useExecuteQuery({
    dataSource: Ecom.DataSource,
    dimensions: [dateDimension],
    measures: [measureFactory.sum(Ecom.Commerce.Revenue, 'Total Revenue')],
    filters: [
      filterFactory.measureLessThanOrEqual(measureFactory.sum(Ecom.Commerce.Revenue), 1000000),
      filterFactory.members(Ecom.Commerce.Date.Years, [
        '2009-01-01',
        '2010-01-01',
        '2011-01-01',
        '2012-01-01',
      ]),
    ],
  });

  const [continousTimeline, setContinousTimeline] = useState(true);
  const [connectNulls, setConnectNulls] = useState(false);
  const [treatNullsAsZeros, setTreatNullsAsZeros] = useState(false);

  return (
    <>
      {isLoading && <div>Loading...</div>}
      {isError && <div>Error</div>}
      {!isLoading && !isError && <div>Timeseries: {dateLevel}</div>}
      {data && (
        <div style={{ height: '100%' }}>
          <button
            style={{ margin: '15px' }}
            onClick={() => setContinousTimeline(!continousTimeline)}
          >
            Continous: {continousTimeline ? ' On' : 'Off'}
          </button>
          <button style={{ margin: '15px' }} onClick={() => setConnectNulls(!connectNulls)}>
            Connect Nulls: {connectNulls ? ' On' : 'Off'}
          </button>
          <button
            style={{ margin: '15px' }}
            onClick={() => setTreatNullsAsZeros(!treatNullsAsZeros)}
          >
            Treat Nulls As Zeros: {treatNullsAsZeros ? ' On' : 'Off'}
          </button>
          <button style={{ margin: '15px' }} onClick={() => setDateLevel('Days')}>
            Days
          </button>
          <button style={{ margin: '15px' }} onClick={() => setDateLevel('Months')}>
            Months
          </button>
          <button style={{ margin: '15px' }} onClick={() => setDateLevel('Years')}>
            Years
          </button>
          <Chart
            chartType="line"
            dataSet={data}
            dataOptions={{
              category: [
                {
                  column: data.columns[0],
                  continuous: continousTimeline,
                },
              ],
              value: [
                {
                  column: { name: 'Total Revenue' },
                  treatNullDataAsZeros: treatNullsAsZeros,
                  connectNulls: connectNulls,
                },
              ],
            }}
          />
        </div>
      )}
    </>
  );
};
