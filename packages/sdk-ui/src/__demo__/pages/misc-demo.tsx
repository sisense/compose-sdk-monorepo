/* eslint-disable max-lines */
/* eslint-disable max-lines-per-function */
import { Filter, filterFactory, measureFactory } from '@sisense/sdk-data';
import * as DM from '../sample-ecommerce-autogenerated';
import { ExecuteQuery, ExecuteQueryByWidgetId } from '../../query-execution';
import { DashboardWidget } from '../../dashboard-widget/dashboard-widget';
import React, { useState } from 'react';
import { BasicMemberFilterTile, DateRangeFilterTile } from '../../filters';
import LanguageSwitcher from './helper-components/language-switcher';
import { Table } from '../../table';
import { FunnelChart } from '../../funnel-chart';
import { AreaChart } from '../../area-chart';
import { BarChart } from '../../bar-chart';
import { ColumnChart } from '../../column-chart';
import { IndicatorChart } from '../../indicator-chart';
import { LineChart } from '../../line-chart';
import { PieChart } from '../../pie-chart';
import { PolarChart } from '../../polar-chart';
import { ScatterChart } from '../../scatter-chart';
import { ThemeProvider } from '../../theme-provider';
import { Chart } from '../../chart';
import { DataPoint, DataPoints, ScatterDataPoint } from '../../types';

/**
This page is used by Tuan for testing quickly the SDK UI components for API Doc.
Feel free to use it for your own testing.
 */
export const MiscDemo = () => {
  const allMembers = ['United States', 'Canada', 'Mexico'].map((m) => ({ key: m, title: m }));
  const selectedMembers = ['United States', 'Mexico'].map((m) => ({ key: m, title: m }));

  const LONG_LIST_LEN = 2000;
  const randomArray = Array.from({ length: LONG_LIST_LEN }, (_, idx) => 'v' + (idx + 1).toString());

  const allMembersLongList = randomArray.map((m) => ({ key: m, title: m }));
  const selectedMembersLongList = randomArray
    .slice(0, LONG_LIST_LEN - 1)
    .map((m) => ({ key: m, title: m }));

  const onDataPointsSelected = (points: DataPoints) => console.log('Point selected', points);
  const onDataPointClicked = (point: DataPoint | ScatterDataPoint) =>
    console.log('Point clicked', point);

  const [dateRangeFilter, setDateRangeFilter] = useState<Filter>(
    filterFactory.dateRange(DM.Commerce.Date.Days),
  );

  return (
    <div className="csdk-h-fit">
      <BasicMemberFilterTile
        title={'Large List'}
        allMembers={allMembersLongList}
        initialSelectedMembers={selectedMembersLongList}
      />
      <br />
      <br />
      <LanguageSwitcher />
      <br />
      Chart with No Local Data
      <Chart
        chartType={'pie'}
        dataSet={{ columns: [], rows: [] }}
        dataOptions={{
          category: [
            {
              name: 'Years',
              type: 'date',
            },
          ],
          value: [
            {
              name: 'Quantity',
              aggregation: 'sum',
              title: 'Total Quantity',
            },
          ],
        }}
      />
      <Chart
        dataSet={DM.DataSource}
        chartType={'bar'}
        dataOptions={{
          category: [measureFactory.sum(DM.Commerce.Cost)],
          value: [],
          breakBy: [],
        }}
      />
      <Chart
        dataSet={DM.DataSource}
        chartType={'line'}
        dataOptions={{
          category: [
            {
              column: DM.Commerce.Date.Months,
              dateFormat: 'YYYY-MM-DD',
            },
          ],
          value: [
            measureFactory.sum(DM.Commerce.Revenue),
            {
              column: measureFactory.sum(DM.Commerce.Quantity),
              showOnRightAxis: true,
              chartType: 'column',
            },
          ],
          breakBy: [],
        }}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <ScatterChart
        dataSet={DM.DataSource}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 10)]}
        dataOptions={{
          x: measureFactory.sum(DM.Commerce.Revenue),
          y: measureFactory.sum(DM.Commerce.Quantity),
          breakByPoint: DM.Category.Category,
          breakByColor: DM.Commerce.Gender,
          size: measureFactory.sum(DM.Commerce.Cost),
        }}
        styleOptions={{
          xAxis: {
            enabled: true,
            gridLines: true,
            isIntervalEnabled: false,
            labels: {
              enabled: true,
            },
            logarithmic: true,
            title: {
              enabled: true,
              text: 'Total Revenue',
            },
          },
          yAxis: {
            enabled: true,
            gridLines: true,
            isIntervalEnabled: false,
            labels: {
              enabled: true,
            },
            logarithmic: true,
            title: {
              enabled: true,
              text: 'Total Quantity',
            },
          },
        }}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <PolarChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.AgeRange],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
          breakBy: [DM.Commerce.Gender],
        }}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <PieChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.AgeRange],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
        }}
        filters={[
          filterFactory.measureGreaterThanOrEqual(measureFactory.sum(DM.Commerce.Revenue), 1600000),
        ]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <LineChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.Date.Years],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
          breakBy: [DM.Commerce.Gender],
        }}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <IndicatorChart
        dataSet={DM.DataSource}
        dataOptions={{
          value: [measureFactory.sum(DM.Commerce.Revenue)],
        }}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
      />
      <div style={{ width: '400px', height: '400px' }}>
        <ThemeProvider
          theme={{
            chart: {
              backgroundColor: '#333333',
              textColor: 'orange',
              secondaryTextColor: 'purple',
              panelBackgroundColor: '#F6F6F6',
            },
            typography: {
              fontFamily: 'impact',
            },
          }}
        >
          <IndicatorChart
            dataOptions={{
              value: [
                {
                  column: measureFactory.sum(DM.Commerce.Revenue),
                  numberFormatConfig: {
                    name: 'Numbers',
                    decimalScale: 2,
                    trillion: true,
                    billion: true,
                    million: true,
                    kilo: true,
                    thousandSeparator: true,
                    prefix: false,
                    symbol: '$',
                  },
                },
              ],
              secondary: [],
              min: [measureFactory.constant(0)],
              max: [measureFactory.constant(125000000)],
            }}
            filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
            styleOptions={{
              indicatorComponents: {
                title: {
                  shouldBeShown: true,
                  text: 'Total Revenue',
                },
                secondaryTitle: {
                  text: '',
                },
                ticks: {
                  shouldBeShown: true,
                },
                labels: {
                  shouldBeShown: true,
                },
              },
              subtype: 'indicator/gauge',
              skin: 1,
            }}
          />
        </ThemeProvider>
      </div>
      <ColumnChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.AgeRange],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
          breakBy: [DM.Commerce.Gender],
        }}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <BarChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.AgeRange],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
          breakBy: [DM.Commerce.Gender],
        }}
        filters={[filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <AreaChart
        dataSet={DM.DataSource}
        dataOptions={{
          category: [DM.Commerce.Date.Years],
          value: [measureFactory.sum(DM.Commerce.Revenue)],
          breakBy: [DM.Commerce.Gender],
        }}
        styleOptions={{ subtype: 'area/stacked' }}
        filters={[filterFactory.members(DM.Commerce.Gender, ['Female', 'Male'])]}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      Copy
      <FunnelChart
        dataSet={{
          columns: [
            { name: 'Stage', type: 'string' },
            { name: 'Unique Users', type: 'number' },
          ],
          rows: [
            ['Website visits', 15654],
            ['Downloads', 4064],
            ['Requested price list', 1987],
            ['Invoice sent', 976],
            ['Finalized', 846],
          ],
        }}
        dataOptions={{
          category: [
            {
              name: 'Stage',
              type: 'string',
            },
          ],
          value: [
            {
              name: 'Unique Users',
              aggregation: 'sum',
            },
          ],
        }}
        onDataPointsSelected={onDataPointsSelected}
        onDataPointClick={onDataPointClicked}
      />
      <DateRangeFilterTile
        title="Date Range"
        attribute={DM.Commerce.Date.Days}
        filter={dateRangeFilter}
        onChange={(filter: Filter) => {
          setDateRangeFilter(filter);
        }}
      />
      ExecuteQuery
      <ExecuteQuery
        dimensions={[DM.Commerce.Date.Days]}
        measures={[measureFactory.sum(DM.Commerce.Revenue)]}
        filters={[dateRangeFilter, filterFactory.greaterThan(DM.Commerce.Revenue, 1000)]}
        onDataChanged={(data) => {
          console.log('ExecuteQuery onDataChanged', data);
        }}
        // This is to demonstrate floats are acceptable and will be rounded to the nearest integer
        count={100.521321312}
        offset={50}
      >
        {({ data }) => {
          return <div>{`Total Rows: ${data?.rows.length}`}</div>;
        }}
      </ExecuteQuery>
      ExecuteQueryByWidgetId
      <ExecuteQueryByWidgetId
        widgetOid={'64473e07dac1920034bce77f'}
        dashboardOid={'6441e728dac1920034bce737'}
        onDataChanged={(data, query) => {
          console.log('ExecuteQueryByWidgetId onDataChanged', data, query);
        }}
        count={10}
        offset={20}
      >
        {({ data }) => {
          return <div>{`Total Rows: ${data?.rows.length}`}</div>;
        }}
      </ExecuteQueryByWidgetId>
      DashboardWidget
      <DashboardWidget
        widgetOid={'64473e07dac1920034bce77f'}
        dashboardOid={'6441e728dac1920034bce737'}
      />
      <BasicMemberFilterTile
        title={'Country'}
        allMembers={allMembers}
        initialSelectedMembers={selectedMembers}
      />
      <Table
        dataSet={DM.DataSource}
        dataOptions={{
          columns: [
            DM.Commerce.AgeRange,
            DM.Commerce.Revenue,
            DM.Commerce.Cost,
            DM.Commerce.Quantity,
          ],
        }}
        styleOptions={{
          width: 600,
          height: 750,
          headersColor: false,
          alternatingColumnsColor: false,
          alternatingRowsColor: true,
        }}
      />
      <Chart
        dataSet={DM.DataSource}
        chartType={'boxplot'}
        dataOptions={{
          category: [DM.Commerce.AgeRange],
          value: [DM.Commerce.Cost],
          boxType: 'iqr',
        }}
      />
    </div>
  );
};
