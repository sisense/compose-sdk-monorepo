import { CartesianSelectableChart } from './cartesian-selectable-chart.js';
import { Filter, MembersFilter, filterFactory, measureFactory } from '@sisense/sdk-data';
import { useCallback, useMemo, useState } from 'react';
import { MemberFilterTile } from '../../../filters/index.js';
import Button from '@mui/material/Button';
import * as DM from '../../sample-ecommerce-autogenerated.js';
import { Table } from '../../../table/index.js';
import { PieChart } from '@/pie-chart.js';

const limitCountries = filterFactory.members(DM.Country.Country, [
  'Albania',
  'APO/FPO',
  'Argentina',
  'Armenia',
  'Australia',
  'Austria',
  'Azerbaijan',
  'Republic',
]);

export const PieChartHighlightDemo = () => {
  const defaultGenderFilter = useMemo(() => new MembersFilter(DM.Commerce.Gender), []);
  const defaultAgeRangeFilter = useMemo(() => new MembersFilter(DM.Commerce.AgeRange), []);
  const defaultDependentFilter = useMemo(() => new MembersFilter(DM.Country.Country), []);

  const [genderFilter, setGenderFilter] = useState<MembersFilter>(defaultGenderFilter);
  const [ageRangeFilter, setAgeRangeFilter] = useState<MembersFilter>(defaultAgeRangeFilter);
  const [dependentFilter, setDependentFilter] = useState<MembersFilter>(defaultDependentFilter);

  const updateFilter = useCallback(
    (filter: Filter | null) => {
      if (!filter) return;
      if (filter.attribute === DM.Commerce.Gender) setGenderFilter(filter as MembersFilter);
      if (filter.attribute === DM.Commerce.AgeRange) setAgeRangeFilter(filter as MembersFilter);
    },
    [setGenderFilter, setAgeRangeFilter],
  );

  const dataOptions = useMemo(
    () => ({
      value: [measureFactory.sum(DM.Commerce.Revenue)],
      category: [DM.Commerce.AgeRange],
    }),
    [],
  );

  return (
    <>
      {`Filter Members: ${dependentFilter.members}`}
      <div className="csdk-flex csdk-flex-row">
        <div className="csdk-flex csdk-flex-row csdk-flex-grow">
          <PieChart
            dataOptions={dataOptions}
            filters={[genderFilter, dependentFilter]}
            highlights={[ageRangeFilter]}
            onBeforeRender={(options) => {
              console.log('DEBUG options', options);
              return options;
            }}
          />
          <CartesianSelectableChart
            filters={[genderFilter, dependentFilter]}
            highlights={[ageRangeFilter]}
            onPointsSelect={useCallback(
              (filters) => {
                setAgeRangeFilter(filters[0]);
              },
              [setAgeRangeFilter],
            )}
          />
        </div>
        <div className="csdk-m-2">
          <h3>Shared filters</h3>
          <div className="csdk-flex csdk-justify-center csdk-mb-2">
            <Button
              variant={'outlined'}
              size={'small'}
              fullWidth
              onClick={() => {
                setAgeRangeFilter(defaultAgeRangeFilter);
                setGenderFilter(defaultGenderFilter);
              }}
            >
              Clear selections
            </Button>
          </div>
          {ageRangeFilter && (
            <MemberFilterTile
              title={ageRangeFilter.attribute.name}
              attribute={ageRangeFilter.attribute}
              filter={ageRangeFilter}
              onChange={updateFilter}
            />
          )}
          {genderFilter && (
            <>
              <MemberFilterTile
                title={genderFilter.attribute.name}
                attribute={genderFilter.attribute}
                filter={genderFilter}
                onChange={updateFilter}
              />
              <MemberFilterTile
                attribute={DM.Country.Country}
                title={'Country (dependent on Gender)'}
                filter={dependentFilter}
                parentFilters={[limitCountries, ageRangeFilter, genderFilter]}
                onChange={(filter) => setDependentFilter(filter as MembersFilter)}
              />
            </>
          )}
        </div>
      </div>
      <Table
        dataSet={DM.DataSource}
        dataOptions={{
          columns: [DM.Country.Country, measureFactory.sum(DM.Commerce.Revenue, 'Total Revenue')],
        }}
        filters={[limitCountries, genderFilter, ageRangeFilter]}
      />
    </>
  );
};
