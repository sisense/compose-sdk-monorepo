import { MembersFilter, measureFactory } from '@sisense/sdk-data';
import { ChartWidget } from '../../../widgets/chart-widget';
import * as DM from '../../sample-ecommerce-autogenerated';
import { ScatterDataPoint } from '../../../types';
import { useCallback } from 'react';

export const ScatterSelectableChart = ({
  onPointsSelect,
  filters,
}: {
  onPointsSelect: (filters: MembersFilter[]) => void;
  filters: MembersFilter[];
}) => {
  const dataOptions = {
    x: measureFactory.sum(DM.Commerce.Revenue),
    y: measureFactory.sum(DM.Commerce.Quantity),
    breakByPoint: DM.Commerce.AgeRange,
    breakByColor: DM.Commerce.Gender,
    size: measureFactory.sum(DM.Commerce.Cost),
  };

  const updateSelectedPoints = useCallback(
    (selectedPoints: ScatterDataPoint[]) => {
      const categoryMap = selectedPoints.reduce(
        (acc, { breakByColor, breakByPoint }) => {
          if (breakByColor) acc.breakByColor.push(breakByColor);
          if (breakByPoint) acc.breakByPoint.push(breakByPoint);
          return {
            breakByColor: [...new Set(acc.breakByColor)],
            breakByPoint: [...new Set(acc.breakByPoint)],
          };
        },
        { breakByColor: [] as string[], breakByPoint: [] as string[] },
      );
      const filters = [
        new MembersFilter(dataOptions.breakByColor, categoryMap.breakByColor),
        new MembersFilter(dataOptions.breakByPoint, categoryMap.breakByPoint),
      ];
      onPointsSelect(filters);
    },
    [dataOptions.breakByColor, dataOptions.breakByPoint, onPointsSelect],
  );

  return (
    <>
      <div className="csdk-m-2">
        <h3>Scatter Selectable Chart</h3>
        <ChartWidget
          highlightSelectionDisabled={true}
          styleOptions={{
            height: 400,
            width: 600,
            border: true,
            borderColor: 'lightgrey',
            cornerRadius: 'Medium',
          }}
          filters={filters}
          chartType={'scatter'}
          dataOptions={dataOptions}
          onDataPointsSelected={updateSelectedPoints}
          onDataPointClick={(dataPoint: ScatterDataPoint) => updateSelectedPoints([dataPoint])}
        />
      </div>
    </>
  );
};
