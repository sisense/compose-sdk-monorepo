import { Filter, MembersFilter, measureFactory } from '@sisense/sdk-data';
import { CARTESIAN_CHART_TYPES } from '../../../chart-options-processor/translations/types';
import { ChartWidget } from '../../../widgets/chart-widget';
import { useCallback, useState } from 'react';
import * as DM from '../../sample-ecommerce-autogenerated';
import { ChartDataPoint, ChartType, DataPoint } from '../../../types';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import { getMemberNameFromDataPoint } from '../../../../src/widgets/common/drilldown';

export const CartesianSelectableChart = ({
  onPointsSelect,
  filters,
  highlights = [],
}: {
  onPointsSelect: (filters: MembersFilter[]) => void;
  filters: Filter[];
  highlights?: Filter[];
}) => {
  const [cartesianChartType, setCartesianChartType] = useState('line');

  const updateSelectedDataPoints = useCallback(
    (selectedDataPoints: ChartDataPoint[]) => {
      const filter = selectedDataPoints.length
        ? new MembersFilter(
            DM.Commerce.AgeRange,
            selectedDataPoints.map(getMemberNameFromDataPoint),
          )
        : undefined;
      if (filter) onPointsSelect([filter]);
    },
    [onPointsSelect],
  );

  return (
    <>
      <div className="csdk-m-2">
        <h3>Cartesian Selectable Chart</h3>
        <ChartWidget
          chartType={cartesianChartType as ChartType}
          filters={filters}
          highlights={highlights}
          topSlot={
            <div className="csdk-flex csdk-justify-center">
              <ButtonGroup variant="outlined" size="small" fullWidth color="info">
                {CARTESIAN_CHART_TYPES.map((chartType) => {
                  return (
                    <Button
                      key={chartType}
                      size={'small'}
                      onClick={() => setCartesianChartType(chartType)}
                    >
                      {chartType}
                    </Button>
                  );
                })}
              </ButtonGroup>
            </div>
          }
          highlightSelectionDisabled={true}
          dataOptions={{
            category: [DM.Commerce.AgeRange],
            value: [measureFactory.sum(DM.Commerce.Revenue)],
          }}
          styleOptions={{
            height: 400,
            width: 600,
            border: true,
            borderColor: 'lightgrey',
            cornerRadius: 'Medium',
          }}
          onDataPointsSelected={updateSelectedDataPoints}
          onDataPointClick={(dataPoint: DataPoint) => {
            updateSelectedDataPoints([dataPoint]);
          }}
        />
      </div>
    </>
  );
};
