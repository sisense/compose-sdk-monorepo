/* eslint-disable max-lines */
/* eslint-disable max-lines-per-function */
import { useState } from 'react';
import { filterFactory } from '@sisense/sdk-data';
import * as DM from '../sample-ecommerce-autogenerated.js';

import { DashboardWidget } from '../../dashboard-widget/dashboard-widget.js';
import { useGetWidgetModel } from '../../models/widget/use-get-widget-model.js';
import { useWidgetFromSampleEcommerceDashboard } from './helpers/use-widget-from-sample-ecommerce-dashboard.js';
import ReactJson from 'react-json-view';
import {
  ExecuteQueryParams,
  useExecuteQuery,
  useExecuteQueryByWidgetId,
} from '../../query-execution/index.js';
import { Chart } from '../../chart';
import { ThemeProvider } from '../../theme-provider/index.js';
import { ChartWidget } from '../../widgets/chart-widget.js';
import { Table, TableWidget } from '../../index.js';
import { isTabularWidget } from '../../dashboard-widget/utils.js';

export const SAMPLE_ECOMMERCE_WIDGET_TITLES = [
  'REVENUE vs.UNITS SOLD',
  'GENDER BREAKDOWN',
  'TOP CATEGORIES BY REVENUE, UNITS SOLD AND GENDER',
  'AGE RANGE BREAKDOWN',
  'TOTAL REVENUE',
  'TOTAL UNITS SOLD',
  'TOTAL SALES',
  'TOTAL BRANDS',
  'TOP 3 CATEGORIES BY REVENUE AND AGE',
] as const;

export function UseGetWidgetModelDemo() {
  const [renderCount, setRenderCount] = useState(0);
  const [sampleEcommerceWidgetTitle, setSampleEcommerceWidgetTitle] = useState<string>(
    SAMPLE_ECOMMERCE_WIDGET_TITLES[0],
  );
  const { widgetOid, dashboardOid, isSearchingForWidget } = useWidgetFromSampleEcommerceDashboard(
    sampleEcommerceWidgetTitle,
  );
  const {
    widget: widgetModel,
    isLoading: isModelLoading,
    isError: isModelError,
  } = useGetWidgetModel({
    widgetOid: widgetOid || '',
    dashboardOid: dashboardOid || '',
    enabled: !!widgetOid && !!dashboardOid,
  });

  const queryParams: ExecuteQueryParams = widgetModel
    ? widgetModel.getExecuteQueryParams()
    : { enabled: false };

  const {
    data: dataByModel,
    isLoading: isDataLoading,
    isError: isDataError,
  } = useExecuteQuery(queryParams);

  const { data: dataByWidgetId } = useExecuteQueryByWidgetId({
    widgetOid: widgetOid ?? '',
    dashboardOid: dashboardOid ?? '',
    enabled: !!widgetOid && !!dashboardOid,
  });

  return (
    <ThemeProvider theme={{ palette: { variantColors: ['orange', 'red'] } }}>
      <div>
        <WidgetSelectionButtons
          widgetTitles={SAMPLE_ECOMMERCE_WIDGET_TITLES}
          selectedWidgetTitle={sampleEcommerceWidgetTitle}
          setSampleEcommerceWidgetTitle={setSampleEcommerceWidgetTitle}
        />
        {isSearchingForWidget && <div>Searching for widget...</div>}
        {isModelLoading && <div>Loading model...</div>}
        {isModelError && <div>Error loading model</div>}
        {!isModelLoading && (
          <>
            {widgetModel && (
              <div>
                <div>Widget model:</div>
                <ReactJson src={widgetModel} collapsed />
              </div>
            )}
            {isDataLoading && <div>Loading data...</div>}
            {isDataError && <div>Error loading data</div>}
            {dataByModel && (
              <div>
                <div>Data by Model:</div>
                <ReactJson src={dataByModel} collapsed />
              </div>
            )}
            {dataByWidgetId && (
              <div>
                <div>Data by Widget Id:</div>
                <ReactJson src={dataByWidgetId} collapsed />
              </div>
            )}
            {widgetModel && !isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>Chart by Model:</div>
                <Chart {...widgetModel.getChartProps()} />
              </div>
            )}
            {widgetModel && isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>Table by Model:</div>
                <Table {...widgetModel.getTableProps()} />
              </div>
            )}

            {widgetModel && !isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>ChartWidget by Model:</div>
                <ChartWidget {...widgetModel.getChartWidgetProps()} />
              </div>
            )}
            {widgetModel && isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>TableWidget by Model:</div>
                <TableWidget {...widgetModel.getTableWidgetProps()} />
              </div>
            )}

            {widgetOid && dashboardOid && (
              <div>
                <div>Original DashboardWidget: </div>
                <DashboardWidget widgetOid={widgetOid} dashboardOid={dashboardOid} />
              </div>
            )}
            {widgetModel && !isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>Chart by Model with additional filter [Condition === 'New']:</div>
                <Chart
                  {...widgetModel.getChartProps()}
                  filters={[
                    ...widgetModel.filters,
                    filterFactory.members(DM.Commerce.Condition, ['New']),
                  ]}
                />
              </div>
            )}
            {widgetModel && isTabularWidget(widgetModel.widgetType) && (
              <div>
                <div>Table by Model with additional filter [Condition === 'New']:</div>
                <Table
                  {...widgetModel.getTableProps()}
                  filters={[
                    ...widgetModel.filters,
                    filterFactory.members(DM.Commerce.Condition, ['New']),
                  ]}
                />
              </div>
            )}
          </>
        )}
        <button onClick={() => setRenderCount(renderCount + 1)}>Re-render</button>
      </div>
    </ThemeProvider>
  );
}

export function WidgetSelectionButtons({
  widgetTitles,
  selectedWidgetTitle,
  setSampleEcommerceWidgetTitle,
}: {
  widgetTitles: readonly string[];
  selectedWidgetTitle: string;
  setSampleEcommerceWidgetTitle: (title: string) => void;
}) {
  return (
    <div>
      {widgetTitles.map((title) => (
        <button
          key={title}
          onClick={() => setSampleEcommerceWidgetTitle(title)}
          disabled={title === selectedWidgetTitle}
        >
          {title}
        </button>
      ))}
    </div>
  );
}
