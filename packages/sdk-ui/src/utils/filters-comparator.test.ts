import { isFiltersChanged } from './filters-comparator'; // Update with the correct path
import { Filter, filterFactory } from '@sisense/sdk-data';
import * as DM from '../__mocks__/data/sample-ecommerce-autogenerated';

describe('isFiltersChanged', () => {
  const someFilter = filterFactory.greaterThan(DM.Commerce.Revenue, 1000);
  const someAnotherFilter = filterFactory.lessThan(DM.Commerce.Revenue, 1000);
  const someAnotherFilterUpdated = filterFactory.lessThan(DM.Commerce.Revenue, 100);

  it('should return false for two undefined filters', () => {
    expect(isFiltersChanged(undefined, undefined)).toBe(false);
  });

  it('should return true if one filter is undefined and the other is not', () => {
    const prevFilters = undefined;
    const newFilters: Filter[] = [someFilter];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(true);
  });

  it('should return true if the length of filters is different', () => {
    const prevFilters: Filter[] = [someFilter];
    const newFilters: Filter[] = [someFilter, someAnotherFilter];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(true);
  });

  it('should return false if both filters are empty', () => {
    expect(isFiltersChanged([], [])).toBe(false);
  });

  it('should return true if filters have changed', () => {
    const prevFilters: Filter[] = [someFilter];
    const newFilters: Filter[] = [someAnotherFilter];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(true);
  });

  it('should return false if filters have not changed', () => {
    const prevFilters: Filter[] = [someFilter, someAnotherFilter];
    const newFilters: Filter[] = [someFilter, someAnotherFilter];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(false);
  });

  it('should return true if filters have switched ordering', () => {
    const prevFilters: Filter[] = [someFilter, someAnotherFilter];
    const newFilters: Filter[] = [someAnotherFilter, someFilter];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(true);
  });

  it('should return true if filters have changed slightly', () => {
    const prevFilters: Filter[] = [someFilter, someAnotherFilter];
    const newFilters: Filter[] = [someFilter, someAnotherFilterUpdated];
    expect(isFiltersChanged(prevFilters, newFilters)).toBe(true);
  });
});
