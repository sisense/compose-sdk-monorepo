import { AnyObject, MetadataItem } from '@ethings-os/sdk-data';

/**
 * Type guard to check if a filter is a possible ranking filter with top/bottom properties
 */
function isPossibleRankingFilterJaql(
  filter: AnyObject | undefined,
): filter is { top?: number; bottom?: number; by?: AnyObject } {
  return Boolean(filter && (filter.top !== undefined || filter.bottom !== undefined));
}

/**
 * Fix problematic jaql for RankingFilter generated by NLQ
 *
 * @param items - the MetadataItem[]
 * @return the MetadataItem[] with fixed RankingFilter Jaql
 */
export const fixRankingFilterJaql = (items: MetadataItem[]): MetadataItem[] => {
  // Find the first rows dimension
  const rowsDimension = items.find((item) => item.panel === 'rows');

  // If no rows dimension exists, return original items
  if (!rowsDimension) {
    return items;
  }

  // Transform the items array
  return items.map((item) => {
    // Check if this item is problematic - using type guard for filter properties
    const filter = item.jaql.filter;
    const isProblematic =
      item.panel === 'scope' && isPossibleRankingFilterJaql(filter) && filter.by === undefined;

    if (!isProblematic) {
      return item;
    }

    // Transform the problematic item
    const { type, context, formula, filter: originalFilter, ...otherJaqlProps } = item.jaql;

    return {
      ...item,
      jaql: {
        // Copy dimension properties from rows dimension
        dim: rowsDimension.jaql.dim,
        table: rowsDimension.jaql.table,
        column: rowsDimension.jaql.column,
        datatype: rowsDimension.jaql.datatype,
        // Keep the filter but add the by clause
        filter: {
          ...originalFilter,
          by: {
            type,
            context,
            formula,
          },
        },
        // Keep other properties like title
        ...otherJaqlProps,
      },
    };
  }) as MetadataItem[];
};
