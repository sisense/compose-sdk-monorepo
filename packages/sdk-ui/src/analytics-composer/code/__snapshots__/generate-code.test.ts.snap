// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateCode > should generate code from template for Angular 1`] = `
"import { Component } from '@angular/core';
import { type ChartDataOptions, type ChartStyleOptions } from '@sisense/sdk-ui-angular';
import { filterFactory, measureFactory } from '@sisense/sdk-data';
import * as DM from './data-source'; // generated with @sisense/sdk-cli

@Component({
    selector: 'code-example',
    template: \`
      <csdk-chart-widget
        [title]="'My Chart'"
        chartType='bar'
        [dataSource]='DM.DataSource'
        [dataOptions]='dataOptions'
        [filters]='filters'
        [styleOptions]='styleOptions'
        [drilldownOptions]='drilldownOptions'
      />
    \`
})
export class CodeExample {
    DM = DM;
    dataOptions: ChartDataOptions = { category: [DM.Commerce.Date.Years], value: [measureFactory.sum(DM.Commerce.Revenue)] };
    filters = [filterFactory.greaterThan(DM.Commerce.Revenue, 0)];
    styleOptions: ChartStyleOptions = {{styleOptionsString}};
    drilldownOptions = {{drilldownOptionsString}};
}"
`;

exports[`generateCode > should generate code from template for React 1`] = `
"import { Chart } from '@sisense/sdk-ui';
import { filterFactory, measureFactory } from '@sisense/sdk-data';
import * as DM from './data-source'; // generated with @sisense/sdk-cli

export default function CodeExample() {
  return (
    <Chart
      title={'My Chart'}
      dataSource={DM.DataSource}
      chartType={'bar'}
      dataOptions={ { category: [DM.Commerce.Date.Years], value: [measureFactory.sum(DM.Commerce.Revenue)] } }
      filters={ [filterFactory.greaterThan(DM.Commerce.Revenue, 0)] }
      styleOptions={ {{styleOptionsString}} }
      drilldownOptions={ {{drilldownOptionsString}} }
    />
  );
}"
`;

exports[`generateCode > should generate code from template for Vue 1`] = `
"<script setup lang="ts">
  import { ref } from 'vue';
  import { Chart, type ChartStyleOptions } from '@sisense/sdk-ui-vue';
  import { filterFactory, measureFactory } from '@sisense/sdk-data';
  import * as DM from './data-source'; // generated with @sisense/sdk-cli

  const dataOptions = ref({ category: [DM.Commerce.Date.Years], value: [measureFactory.sum(DM.Commerce.Revenue)] });
  const filters = ref([filterFactory.greaterThan(DM.Commerce.Revenue, 0)]);
  const styleOptions = ref<ChartStyleOptions>({{styleOptionsString}});
  const drilldownOptions = ref({{drilldownOptionsString}});
</script>

<template>
  <Chart
    chartType="bar"
    :dataOptions="dataOptions"
    :filters="filters"
    :styleOptions="styleOptions"
    :drilldownOptions="drilldownOptions"
    :dataSource="DM.DataSource"
    title="My Chart" />
</template>"
`;
