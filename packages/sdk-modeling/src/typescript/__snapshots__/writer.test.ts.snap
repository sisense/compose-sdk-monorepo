// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`writer > writeJavascript > should generate JS and TS definition files 1`] = `
"import { createAttribute, createDateDimension, createDimension } from '@sisense/sdk-data';
export var DataSource = 'Sample ECommerce';
export var Brand = createDimension({
    name: 'Brand',
    Brand: createAttribute({
        name: 'Brand',
        type: 'text-attribute',
        expression: '[Brand.Brand]',
        description: 'Brand name',
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Brand.Brand ID]',
        description: 'Brand ID',
    }),
});
export var Category = createDimension({
    name: 'Category',
    Category: createAttribute({
        name: 'Category',
        type: 'text-attribute',
        expression: '[Category.Category]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Category.'Category ID']",
    }),
});
export var Commerce = createDimension({
    name: 'Commerce',
    AgeRange: createAttribute({
        name: 'Age Range',
        type: 'text-attribute',
        expression: '[Commerce.Age Range]',
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Brand ID]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Commerce.'Category ID']",
    }),
    Condition: createAttribute({
        name: 'Condition',
        type: 'text-attribute',
        expression: '[Commerce.Condition]',
    }),
    Cost: createAttribute({
        name: 'Cost',
        type: 'numeric-attribute',
        expression: '[Commerce.Cost]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Country ID]',
    }),
    DateMonth: createAttribute({
        name: 'Date (Month)',
        type: 'numeric-attribute',
        expression: '[Commerce.Date (Month)]',
    }),
    Gender: createAttribute({
        name: 'Gender',
        type: 'text-attribute',
        expression: '[Commerce.Gender]',
    }),
    Quantity: createAttribute({
        name: 'Quantity',
        type: 'numeric-attribute',
        expression: '[Commerce.Quantity]',
    }),
    Revenue: createAttribute({
        name: 'Revenue',
        type: 'numeric-attribute',
        expression: '[Commerce.Revenue]',
    }),
    VisitID: createAttribute({
        name: 'Visit ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Visit ID]',
    }),
    Date: createDateDimension({
        name: 'Date',
        expression: '[Commerce.Date (Calendar)]',
    }),
});
export var Country = createDimension({
    name: 'Country',
    Country: createAttribute({
        name: 'Country',
        type: 'text-attribute',
        expression: '[Country.Country]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Country.Country ID]',
    }),
});
import type { Dimension, DateDimension, Attribute } from '@sisense/sdk-data';
export declare const DataSource = 'Sample ECommerce';
interface BrandDimension extends Dimension {
    Brand: Attribute;
    BrandID: Attribute;
}
export declare const Brand: BrandDimension;
interface CategoryDimension extends Dimension {
    Category: Attribute;
    CategoryID: Attribute;
}
export declare const Category: CategoryDimension;
interface CommerceDimension extends Dimension {
    AgeRange: Attribute;
    BrandID: Attribute;
    CategoryID: Attribute;
    Condition: Attribute;
    Cost: Attribute;
    CountryID: Attribute;
    DateMonth: Attribute;
    Gender: Attribute;
    Quantity: Attribute;
    Revenue: Attribute;
    VisitID: Attribute;
    Date: DateDimension;
}
export declare const Commerce: CommerceDimension;
interface CountryDimension extends Dimension {
    Country: Attribute;
    CountryID: Attribute;
}
export declare const Country: CountryDimension;
export {};
"
`;

exports[`writer > writeTypescript > should generate data model file as TypeScript file (dataSource defined as DataSourceInfo) 1`] = `
"import type { Dimension, DateDimension, Attribute, DataSourceInfo } from '@sisense/sdk-data';

import { createAttribute, createDateDimension, createDimension } from '@sisense/sdk-data';

export const DataSource: DataSourceInfo = { title: 'Sample ECommerce', type: 'elasticube' };

interface BrandDimension extends Dimension {
    Brand: Attribute;
    BrandID: Attribute;
}
export const Brand = createDimension({
    name: 'Brand',
    Brand: createAttribute({
        name: 'Brand',
        type: 'text-attribute',
        expression: '[Brand.Brand]',
        description: \`Brand name\`,
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Brand.Brand ID]',
        description: \`Brand ID\`,
    }),
}) as BrandDimension;

interface CategoryDimension extends Dimension {
    Category: Attribute;
    CategoryID: Attribute;
}
export const Category = createDimension({
    name: 'Category',
    Category: createAttribute({
        name: 'Category',
        type: 'text-attribute',
        expression: '[Category.Category]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Category.'Category ID']",
    }),
}) as CategoryDimension;

interface CommerceDimension extends Dimension {
    AgeRange: Attribute;
    BrandID: Attribute;
    CategoryID: Attribute;
    Condition: Attribute;
    Cost: Attribute;
    CountryID: Attribute;
    DateMonth: Attribute;
    Gender: Attribute;
    Quantity: Attribute;
    Revenue: Attribute;
    VisitID: Attribute;
    Date: DateDimension;
}
export const Commerce = createDimension({
    name: 'Commerce',
    AgeRange: createAttribute({
        name: 'Age Range',
        type: 'text-attribute',
        expression: '[Commerce.Age Range]',
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Brand ID]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Commerce.'Category ID']",
    }),
    Condition: createAttribute({
        name: 'Condition',
        type: 'text-attribute',
        expression: '[Commerce.Condition]',
    }),
    Cost: createAttribute({
        name: 'Cost',
        type: 'numeric-attribute',
        expression: '[Commerce.Cost]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Country ID]',
    }),
    DateMonth: createAttribute({
        name: 'Date (Month)',
        type: 'numeric-attribute',
        expression: '[Commerce.Date (Month)]',
    }),
    Gender: createAttribute({
        name: 'Gender',
        type: 'text-attribute',
        expression: '[Commerce.Gender]',
    }),
    Quantity: createAttribute({
        name: 'Quantity',
        type: 'numeric-attribute',
        expression: '[Commerce.Quantity]',
    }),
    Revenue: createAttribute({
        name: 'Revenue',
        type: 'numeric-attribute',
        expression: '[Commerce.Revenue]',
    }),
    VisitID: createAttribute({
        name: 'Visit ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Visit ID]',
    }),
    Date: createDateDimension({
        name: 'Date',
        expression: '[Commerce.Date (Calendar)]',
    }),
}) as CommerceDimension;

interface CountryDimension extends Dimension {
    Country: Attribute;
    CountryID: Attribute;
}
export const Country = createDimension({
    name: 'Country',
    Country: createAttribute({
        name: 'Country',
        type: 'text-attribute',
        expression: '[Country.Country]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Country.Country ID]',
    }),
}) as CountryDimension;
"
`;

exports[`writer > writeTypescript > should generate data model file as TypeScript file 1`] = `
"import type { Dimension, DateDimension, Attribute } from '@sisense/sdk-data';

import { createAttribute, createDateDimension, createDimension } from '@sisense/sdk-data';

export const DataSource = 'Sample ECommerce';

interface BrandDimension extends Dimension {
    Brand: Attribute;
    BrandID: Attribute;
}
export const Brand = createDimension({
    name: 'Brand',
    Brand: createAttribute({
        name: 'Brand',
        type: 'text-attribute',
        expression: '[Brand.Brand]',
        description: \`Brand name\`,
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Brand.Brand ID]',
        description: \`Brand ID\`,
    }),
}) as BrandDimension;

interface CategoryDimension extends Dimension {
    Category: Attribute;
    CategoryID: Attribute;
}
export const Category = createDimension({
    name: 'Category',
    Category: createAttribute({
        name: 'Category',
        type: 'text-attribute',
        expression: '[Category.Category]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Category.'Category ID']",
    }),
}) as CategoryDimension;

interface CommerceDimension extends Dimension {
    AgeRange: Attribute;
    BrandID: Attribute;
    CategoryID: Attribute;
    Condition: Attribute;
    Cost: Attribute;
    CountryID: Attribute;
    DateMonth: Attribute;
    Gender: Attribute;
    Quantity: Attribute;
    Revenue: Attribute;
    VisitID: Attribute;
    Date: DateDimension;
}
export const Commerce = createDimension({
    name: 'Commerce',
    AgeRange: createAttribute({
        name: 'Age Range',
        type: 'text-attribute',
        expression: '[Commerce.Age Range]',
    }),
    BrandID: createAttribute({
        name: 'Brand ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Brand ID]',
    }),
    CategoryID: createAttribute({
        name: 'Category ID',
        type: 'numeric-attribute',
        expression: "[Commerce.'Category ID']",
    }),
    Condition: createAttribute({
        name: 'Condition',
        type: 'text-attribute',
        expression: '[Commerce.Condition]',
    }),
    Cost: createAttribute({
        name: 'Cost',
        type: 'numeric-attribute',
        expression: '[Commerce.Cost]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Country ID]',
    }),
    DateMonth: createAttribute({
        name: 'Date (Month)',
        type: 'numeric-attribute',
        expression: '[Commerce.Date (Month)]',
    }),
    Gender: createAttribute({
        name: 'Gender',
        type: 'text-attribute',
        expression: '[Commerce.Gender]',
    }),
    Quantity: createAttribute({
        name: 'Quantity',
        type: 'numeric-attribute',
        expression: '[Commerce.Quantity]',
    }),
    Revenue: createAttribute({
        name: 'Revenue',
        type: 'numeric-attribute',
        expression: '[Commerce.Revenue]',
    }),
    VisitID: createAttribute({
        name: 'Visit ID',
        type: 'numeric-attribute',
        expression: '[Commerce.Visit ID]',
    }),
    Date: createDateDimension({
        name: 'Date',
        expression: '[Commerce.Date (Calendar)]',
    }),
}) as CommerceDimension;

interface CountryDimension extends Dimension {
    Country: Attribute;
    CountryID: Attribute;
}
export const Country = createDimension({
    name: 'Country',
    Country: createAttribute({
        name: 'Country',
        type: 'text-attribute',
        expression: '[Country.Country]',
    }),
    CountryID: createAttribute({
        name: 'Country ID',
        type: 'numeric-attribute',
        expression: '[Country.Country ID]',
    }),
}) as CountryDimension;
"
`;
